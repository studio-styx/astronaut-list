generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id
  applications Application[]
  blacklist   Boolean @default(false)
  defaultVote String?
  isAvaliator Boolean @default(false)
  createdAt   DateTime @default(now())
  cooldowns   Cooldown[]
  analisingId  Int? @unique
  coins       Int @default(0)
  analyzes    Analyze[]
  votes       Votes[]
  items       Item[]
}


model Votes {
    id            Int        @id @default(autoincrement())
    userId        String
    user          User       @relation(fields: [userId], references: [id])
    applicationId String
    application   Application @relation(fields: [applicationId], references: [id])
    createdAt     DateTime   @default(now())
    origin        Origin     @default(SERVER)
}

enum Origin {
    SERVER
    WEBSITE
}

model Item {
  id         Int
  userId     String
  quantity   Int
  user       User @relation(fields: [userId], references: [id])
  expiresAt  DateTime?
  createdAt  DateTime @default(now())

  @@id([userId, id])
}

model Application {
    id          String @id
    userId      String
    user        User @relation(fields: [userId], references: [id])
    name        String
    votes       Votes[]
    language    String
    lib         String
    description String?
    prefix      String?
    website     String?
    github      String?
    supportServerLink    String?
    hasSlashCommands     Boolean @default(false)
    createdAt   DateTime @default(now())
    analyzeId   Int? @unique
    analyze     Analyze? @relation(fields: [analyzeId], references: [id])
}

model Cooldown {
  id          Int @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  createdAt   DateTime @default(now())
  endIn   DateTime

  @@unique([userId, name])
}

model Annotation {
  id          Int @id @default(autoincrement())
  analyzeId   Int
  analyze     Analyze @relation(fields: [analyzeId], references: [id])
  type        String
  text        String
  createdAt   DateTime @default(now())
}

model VoteReminder {
  userId      String
  channelId   String
  guildId     String
  endTime     DateTime
  
  @@id([userId, channelId, guildId])
  @@index([endTime])
}

model Analyze {
  id            Int @id @default(autoincrement())
  applicationId String?
  application   Application? @relation
  userId        String?
  user          User? @relation(fields: [userId], references: [id])
  annotations   Annotation[]
  avaliation    String?
  approved      Boolean?
  createdAt     DateTime @default(now())
  finishedIn    DateTime?
}